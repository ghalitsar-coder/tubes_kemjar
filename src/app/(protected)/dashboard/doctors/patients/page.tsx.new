"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { TabsList, TabsTrigger, Tabs, TabsContent } from "@/components/ui/tabs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Loader2, Search, UserPlus, Calendar, Clock, UserCircle } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";
import { id } from "date-fns/locale";

type Patient = {
  id: number;
  name: string;
  email: string;
  profilePic?: string;
  recentAppointment?: {
    id: number;
    date: string;
    status: string;
  };
  appointmentsCount: number;
};

export default function DoctorPatientsPage() {
  const [patients, setPatients] = useState<Patient[]>([]);
  const [filteredPatients, setFilteredPatients] = useState<Patient[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [activeTab, setActiveTab] = useState("all");
  const router = useRouter();

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        setIsLoading(true);
        const response = await fetch("/api/doctors/patients");
        
        if (!response.ok) {
          throw new Error("Failed to fetch patients");
        }
        
        const data = await response.json();
        setPatients(data);
        setFilteredPatients(data);
      } catch (error) {
        console.error("Error fetching patients:", error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchPatients();
  }, []);

  // Handle search and filtering
  useEffect(() => {
    let result = [...patients];
    
    // Filter by search query
    if (searchQuery) {
      result = result.filter(
        (patient) =>
          patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          patient.email.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    // Filter by tab
    if (activeTab === "recent") {
      result = result.filter((patient) => patient.recentAppointment);
    }
    
    setFilteredPatients(result);
  }, [searchQuery, activeTab, patients]);

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "PENDING":
        return <Badge variant="outline" className="bg-yellow-100 text-yellow-800">Menunggu</Badge>;
      case "CONFIRMED":
        return <Badge variant="outline" className="bg-blue-100 text-blue-800">Dikonfirmasi</Badge>;
      case "COMPLETED":
        return <Badge variant="outline" className="bg-green-100 text-green-800">Selesai</Badge>;
      case "CANCELLED":
        return <Badge variant="outline" className="bg-red-100 text-red-800">Dibatalkan</Badge>;
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Pasien</h1>
        <Button onClick={() => router.push("/doctors/appointments/book")}>
          <Calendar className="h-4 w-4 mr-2" />
          Buat Janji Temu Baru
        </Button>
      </div>
      
      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Cari pasien..."
            className="pl-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>
      
      <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-6">
          <TabsTrigger value="all">Semua Pasien</TabsTrigger>
          <TabsTrigger value="recent">Janji Temu Terbaru</TabsTrigger>
        </TabsList>
        
        <TabsContent value={activeTab}>
          {isLoading ? (
            <div className="flex justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">Memuat data pasien...</span>
            </div>
          ) : filteredPatients.length === 0 ? (
            <div className="text-center py-12 bg-muted/20 rounded-lg">
              <UserCircle className="h-12 w-12 mx-auto mb-2 text-muted-foreground/50" />
              <p className="text-muted-foreground mb-2">Tidak ada pasien ditemukan</p>
              <p className="text-xs text-muted-foreground">
                {searchQuery ? "Coba cari dengan kata kunci lain" : "Belum ada pasien yang terdaftar"}
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {filteredPatients.map((patient) => (
                <Card key={patient.id} className="overflow-hidden">
                  <CardHeader className="pb-2">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center space-x-3">
                        <Avatar className="h-10 w-10">
                          <AvatarImage src={patient.profilePic} alt={patient.name} />
                          <AvatarFallback>{patient.name.charAt(0)}</AvatarFallback>
                        </Avatar>
                        <div>
                          <CardTitle className="text-base">{patient.name}</CardTitle>
                          <CardDescription className="text-xs">{patient.email}</CardDescription>
                        </div>
                      </div>
                      <Badge variant="outline">
                        {patient.appointmentsCount} kunjungan
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {patient.recentAppointment ? (
                        <div>
                          <p className="text-xs text-muted-foreground mb-1">Janji Temu Terakhir</p>
                          <div className="flex justify-between items-center">
                            <div className="flex items-center text-sm">
                              <Calendar className="h-3.5 w-3.5 mr-1.5 text-muted-foreground" />
                              <span>
                                {format(new Date(patient.recentAppointment.date), "dd MMM yyyy", { locale: id })}
                              </span>
                            </div>
                            {getStatusBadge(patient.recentAppointment.status)}
                          </div>
                        </div>
                      ) : (
                        <p className="text-xs text-muted-foreground">Belum ada riwayat kunjungan</p>
                      )}
                      
                      <div className="pt-2 flex justify-end">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => router.push(`/doctors/patients/${patient.id}`)}
                        >
                          Lihat Detail
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}
